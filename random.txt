hello guyss!!!!!!
// SelectLocationOverlay.jsx
import React, { useEffect, useState } from 'react'
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet'
import L from 'leaflet'
import 'leaflet/dist/leaflet.css'

const markerIcon = new L.Icon({
  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
})

function ClickToSelect({ onSelect }) {
  useMapEvents({
    click(e) {
      onSelect(e.latlng)
    }
  })
  return null
}

export function SelectLocationOverlay({ onLocationConfirm, onClose }) {
  const [selected, setSelected] = useState(null)
  const [name, setName] = useState('')
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const fetchName = async () => {
      if (!selected) return
      setLoading(true)
      try {
        const res = await fetch(`http://localhost:5000/reverse-geocode?lat=${selected.lat}&lon=${selected.lng}`)
        const data = await res.json()
        setName(data.display_name || `${selected.lat}, ${selected.lng}`)
      } catch (e) {
        setName(`${selected.lat}, ${selected.lng}`)
      }
      setLoading(false)
    }
    fetchName()
  }, [selected])

  return (
    <div className="h-full w-full flex flex-col">
      <div className="flex justify-between items-center p-4 bg-blue-600 text-white">
        <h2 className="text-lg font-bold">Pick a Location</h2>
      </div>
      <div className="flex-1">
        <MapContainer center={[27.7, 85.3]} zoom={13} className="h-full w-full">
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="&copy; OpenStreetMap contributors"
          />
          <ClickToSelect onSelect={setSelected} />
          {selected && <Marker position={selected} icon={markerIcon} />}
        </MapContainer>
      </div>
      <div className="p-4 border-t flex justify-between items-center">
        <div>
          <p className="text-sm font-medium">{loading ? 'Loading address...' : name}</p>
          {selected && (
            <p className="text-xs text-gray-500">
              ({selected.lat.toFixed(5)}, {selected.lng.toFixed(5)})
            </p>
          )}
        </div>
        <button
          disabled={!selected || loading}
          onClick={() => {
            onLocationConfirm({ coordinates: selected, name })
            onClose()
          }}
          className="bg-green-600 text-white px-4 py-2 rounded disabled:opacity-50"
        >
          Confirm
        </button>
      </div>
    </div>
  )
}





booking.........

// BookingForm.jsx
import React, { useState } from 'react'
import { Calendar, Clock, MapPin, User, Phone, Mail, CreditCard, Home } from 'lucide-react'
import { SelectLocationOverlay } from './selectLocation'

export default function BookingForm() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    address: '',
    apartment: '',
    city: '',
    date: '',
    timeSlot: '',
    specialInstructions: '',
    contactPreference: 'phone',
    emergencyContact: '',
    emergencyPhone: '',
    coordinates: null
  })

  const [showMapOverlay, setShowMapOverlay] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const [agreed, setAgreed] = useState(false)
  const [errors, setErrors] = useState({})
  const totalSteps = 4

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const validateStep = (step) => {
    const newErrors = {}
    if (step === 1) {
      if (!formData.firstName.trim()) newErrors.firstName = 'First name is required'
      if (!formData.lastName.trim()) newErrors.lastName = 'Last name is required'
      if (!formData.email.trim()) newErrors.email = 'Email is required'
      if (!formData.phone.trim()) newErrors.phone = 'Phone number is required'
    }
    if (step === 2) {
      if (!formData.address.trim()) newErrors.address = 'Address is required'
    }
    if (step === 3) {
      if (!formData.date) newErrors.date = 'Date is required'
      if (!formData.timeSlot) newErrors.timeSlot = 'Time slot is required'
    }
    if (step === 4 && !agreed) newErrors.checkbox = 'Please accept terms'
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (validateStep(4)) {
      alert('Booking confirmed!')
      console.log(formData)
    }
  }

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Book a Service</h1>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label>First Name</label>
          <input name="firstName" className="border w-full p-2" value={formData.firstName} onChange={handleInputChange} />
        </div>
        <div>
          <label>Address</label>
          <input name="address" className="border w-full p-2" value={formData.address} onChange={handleInputChange} />
          <button type="button" className="mt-2 px-3 py-1 bg-blue-500 text-white rounded" onClick={() => setShowMapOverlay(true)}>
            Select from Map
          </button>
        </div>
        <div>
          <label>Date</label>
          <input type="date" name="date" className="border w-full p-2" value={formData.date} onChange={handleInputChange} />
        </div>
        <div>
          <label>Time Slot</label>
          <input name="timeSlot" className="border w-full p-2" value={formData.timeSlot} onChange={handleInputChange} />
        </div>
        <div>
          <label>
            <input type="checkbox" checked={agreed} onChange={(e) => setAgreed(e.target.checked)} /> I agree to terms
          </label>
        </div>
        <button type="submit" className="bg-green-600 text-white px-4 py-2 rounded">Submit</button>
      </form>

      {showMapOverlay && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="relative w-[90vw] h-[90vh] bg-white rounded shadow-xl">
            <button className="absolute top-2 right-2 text-red-600 font-bold" onClick={() => setShowMapOverlay(false)}>âœ–</button>
            <SelectLocationOverlay
              onClose={() => setShowMapOverlay(false)}
              onLocationConfirm={({ coordinates, name }) => {
                setFormData(prev => ({ ...prev, address: name, coordinates }))
              }}
            />
          </div>
        </div>
      )}
    </div>
  )
}
